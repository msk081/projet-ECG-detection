# -*- coding: utf-8 -*-
"""ECG_Detection_Marthe_Kamagate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-NWUpdvOZESNv2hFp-3lXer6RyEoL2K2
"""

!pip install wfdb
!pip install matplotlib

!pip install wfdb matplotlib # Install wfdb and matplotlib
import wfdb
import numpy as np
import matplotlib.pyplot as plt

record = wfdb.rdrecord('100', pn_dir='mitdb')  # ECG de l’enregistrement 100
annotation = wfdb.rdann('100', 'atr', pn_dir='mitdb')
record = wfdb.rdrecord('100', pn_dir='mitdb')  # ECG de l’enregistrement 100
annotation = wfdb.rdann('100', 'atr', pn_dir='mitdb')

wfdb.plot_wfdb(record=record, annotation=annotation)

plt.figure(figsize=(15, 4))
plt.plot(record.p_signal[:1000, 0])  # Canal MLII
plt.title("Signal ECG - Record 100 (1000 premiers points)")
plt.xlabel("Temps (échantillons)")
plt.ylabel("Amplitude (mV)")
plt.grid(True)
plt.show()

import numpy as np

def extract_beats(record, annotation, beat_window=100):
    beats = []
    labels = []
    for idx, label in zip(annotation.sample, annotation.symbol):
        if label in ['N', 'V', 'A', 'L', 'R']:  # Exemples de battements connus
            start = idx - beat_window // 2
            end = idx + beat_window // 2
            if start >= 0 and end <= len(record.p_signal):
                beat = record.p_signal[start:end, 0]
                beats.append(beat)
                labels.append(label)
    return np.array(beats), np.array(labels)

beats, labels = extract_beats(record, annotation)
print(f"{len(beats)} battements extraits : {np.unique(labels, return_counts=True)}")

from sklearn.metrics import classification_report

# Définir explicitement les labels présents dans tout l'ensemble
labels = encoder.transform(encoder.classes_)  # par ex. [0, 1, 2]

# Évaluation
print(classification_report(y_test, y_pred, labels=labels, target_names=encoder.classes_))
